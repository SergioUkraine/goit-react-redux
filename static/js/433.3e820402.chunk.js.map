{"version":3,"file":"static/js/433.3e820402.chunk.js","mappings":"iOAcA,I,gBAAA,EAZA,SAAyBA,EAAKC,GAAe,IAAD,EAC1C,GAA0BC,EAAAA,EAAAA,UAAQ,UAChCC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQP,WADP,QACgBC,GADlD,eAAOO,EAAP,KAAcC,EAAd,KAQA,OAJAC,EAAAA,EAAAA,YAAU,WACRL,OAAOC,aAAaK,QAAQX,EAAKG,KAAKS,UAAUJ,GACjD,GAAE,CAACR,EAAKQ,IAEF,CAACA,EAAOC,EAChB,E,6BCVYI,EAAOC,EAAAA,EAAAA,IAAH,wMAOK,SAAAC,GAAK,OAAKA,EAAMC,KAAO,OAAS,OAA3B,IAGdC,EAAWH,EAAAA,EAAAA,MAAH,yFAMRI,EAAOJ,EAAAA,EAAAA,IAAH,kFAGI,SAAAC,GAAK,OAAKA,EAAMC,KAAO,eAAiB,MAAnC,IAGbG,EAAOL,EAAAA,EAAAA,EAAH,oEAKJM,EAAcN,EAAAA,EAAAA,EAAH,sBAEXO,EAAWP,EAAAA,EAAAA,IAAH,sBAERQ,EAAeR,EAAAA,EAAAA,OAAH,gLAWZS,EAAaT,EAAAA,EAAAA,OAAH,2M,SCGvB,I,EAAA,EAnCA,YAKI,IAJFU,EAIC,EAJDA,KACAC,EAGC,EAHDA,iBACAC,EAEC,EAFDA,oBACAC,EACC,EADDA,kBAEQC,EAAgCJ,EAAhCI,GAAIZ,EAA4BQ,EAA5BR,KAAMa,EAAsBL,EAAtBK,KAAMC,EAAgBN,EAAhBM,YACxB,OACE,UAACjB,EAAD,CAAMG,KAAMA,EAAZ,WACE,SAACC,EAAD,CACEc,KAAK,WACLF,KAAK,OACLG,QAAShB,EACTiB,SAAU,kBAAMR,EAAiBG,EAAvB,KAEZ,UAACV,EAAD,CAAMF,KAAMA,EAAZ,WACE,SAACG,EAAD,UAAOU,IADT,KACsB,SAACT,EAAD,UAAcU,QAEpC,UAACT,EAAD,YACE,SAACE,EAAD,CACEQ,KAAK,SACLG,QAAS,WACPP,EAAkBC,EACnB,EAJH,2EAQA,SAACN,EAAD,CAAcS,KAAK,SAASG,QAAS,kBAAMR,EAAoBE,EAA1B,EAArC,mEAMP,EC3CYO,EAAOrB,EAAAA,EAAAA,GAAH,2O,uBCcjB,I,YAAA,EAZA,YAAuD,IAAnCsB,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAaC,GAAc,YACpD,GAAKF,EACL,OACE,UAACD,EAAD,WACGE,EACAD,EAAMG,KAAI,SAAAC,GAAI,OACb,SAAC,GAAD,QAAwBhB,KAAMgB,GAAUF,GAAzBE,EAAKZ,GADP,MAKpB,E,iDCXYa,GAAa3B,EAAAA,EAAAA,GAAO4B,EAAAA,GAAP5B,CAAH,yNAWV6B,EAAQ7B,EAAAA,EAAAA,GAAH,6EAML8B,EAAQ9B,EAAAA,EAAAA,MAAH,4IAQL+B,GAAQ/B,EAAAA,EAAAA,GAAOgC,EAAAA,GAAPhC,CAAH,+EAMLiC,GAAQjC,EAAAA,EAAAA,GAAOkC,EAAAA,GAAPlC,CAAH,iIAQLmC,EAASnC,EAAAA,EAAAA,OAAH,sLC9BboC,EAASC,EAAAA,KAAaC,MAAM,CAChCvB,KAAMsB,EAAAA,KAAaE,WACnBvB,YAAaqB,EAAAA,KAAaE,aAoC5B,I,eAAA,GAjCA,YAAmC,IAAbC,EAAY,EAAZA,SACdC,EAAY,mCAAG,WAAOC,EAAP,mFAAiBC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,cAA5B,SACbJ,EAASE,GADI,OAEnBE,GAAc,GACdD,IAHmB,2CAAH,wDAKlB,OACE,SAAC,KAAD,CACEE,cAAe,CAAE9B,KAAM,GAAIC,YAAa,IACxC8B,iBAAkBV,EAClBI,SAAUC,EAHZ,SAKG,gBAAGM,EAAH,EAAGA,aAAH,OACC,UAACpB,EAAD,YACE,SAACE,EAAD,qGACA,UAACC,EAAD,WACG,mCACD,SAACC,EAAD,CAAOd,KAAK,OAAOF,KAAK,UACxB,SAACkB,EAAD,CAAOlB,KAAK,OAAOiC,UAAU,YAE/B,UAAClB,EAAD,WACG,4BADH,KACY,SAACC,EAAD,CAAOd,KAAK,OAAOF,KAAK,iBAClC,SAACkB,EAAD,CAAOlB,KAAK,cAAciC,UAAU,YAEtC,SAACb,EAAD,CAAQlB,KAAK,SAASgC,SAAUF,EAAhC,gEAZH,GAmBN,EC7CYpB,IAAa3B,EAAAA,EAAAA,GAAO4B,EAAAA,GAAP5B,CAAH,wNAWV6B,GAAQ7B,EAAAA,EAAAA,GAAH,6EAML8B,GAAQ9B,EAAAA,EAAAA,MAAH,4IAQL+B,IAAQ/B,EAAAA,EAAAA,GAAOgC,EAAAA,GAAPhC,CAAH,iFAMLiC,IAAQjC,EAAAA,EAAAA,GAAOkC,EAAAA,GAAPlC,CAAH,mIAQLmC,GAASnC,EAAAA,EAAAA,OAAH,yLC9BboC,GAASC,EAAAA,KAAaC,MAAM,CAChCvB,KAAMsB,EAAAA,KAAaE,WACnBvB,YAAaqB,EAAAA,KAAaE,aAqC5B,I,MAAA,GAlCA,YAAuC,IAAnBC,EAAkB,EAAlBA,SAAUU,EAAQ,EAARA,KACpBnC,EAAsBmC,EAAtBnC,KAAMC,EAAgBkC,EAAhBlC,YACRyB,EAAY,mCAAG,WAAOC,EAAP,iFAAiBE,EAAjB,EAAiBA,cAAjB,SACbJ,EAASE,GADI,OAEnBE,GAAc,GAFK,2CAAH,wDAKlB,OACE,SAAC,KAAD,CACEC,cAAe,CAAE9B,KAAMA,EAAMC,YAAaA,GAC1C8B,iBAAkBV,GAClBI,SAAUC,EAHZ,SAKG,gBAAGM,EAAH,EAAGA,aAAH,OACC,UAAC,GAAD,YACE,SAAC,GAAD,iHACA,UAAC,GAAD,WACG,mCACD,SAAC,GAAD,CAAO9B,KAAK,OAAOF,KAAK,UACxB,SAAC,GAAD,CAAOA,KAAK,OAAOiC,UAAU,YAE/B,UAAC,GAAD,WACG,4BADH,KACY,SAAC,GAAD,CAAO/B,KAAK,OAAOF,KAAK,iBAClC,SAAC,GAAD,CAAOA,KAAK,cAAciC,UAAU,YAEtC,SAAC,GAAD,CAAQ/B,KAAK,SAASgC,SAAUF,EAAhC,4EAZH,GAmBN,EChBD,GAjCqB,CACnB,CACEjC,GAAI,OACJC,KAAM,sEACNC,YAAa,iHACbd,MAAM,GAER,CACEY,GAAI,OACJC,KAAM,mFACNC,YAAa,iJACbd,MAAM,GAER,CACEY,GAAI,OACJC,KAAM,2DACNC,YAAa,2IACbd,MAAM,GAER,CACEY,GAAI,OACJC,KAAM,2DACNC,YAAa,uHACbd,MAAM,GAER,CACEY,GAAI,OACJC,KAAM,yCACNC,YAAa,6GACbd,MAAM,I,WC1BGiC,GAASnC,EAAAA,EAAAA,OAAH,+UAgBNmD,IAAanD,EAAAA,EAAAA,GAAOoD,GAAAA,IAAPpD,CAAH,2DCRvB,I,SAAA,GARA,YAAqC,IAAhBqD,EAAe,EAAfA,YACnB,OACE,SAAC,GAAD,CAAQjC,QAASiC,EAAjB,UACE,SAACF,GAAD,KAGL,E,WCNYG,GAAWtD,EAAAA,EAAAA,IAAH,mKAURuD,GAAevD,EAAAA,EAAAA,IAAH,iHAOZwD,IAAcxD,EAAAA,EAAAA,GAAOyD,GAAAA,IAAPzD,CAAH,0R,WCflB0D,GAAYC,SAASC,cAAc,eA+BzC,OA7BA,YAAyC,IAAxBrC,EAAuB,EAAvBA,SAAUsC,EAAa,EAAbA,UACnBC,GAAmBC,EAAAA,EAAAA,cACvB,YAAsC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,cACF,WAATF,GAAqBC,IAAWC,GAClCL,GAEH,GACD,CAACA,IAYH,OATAjE,EAAAA,EAAAA,YAAU,WAGR,OAFAL,OAAO4E,iBAAiB,UAAWL,GACnCH,SAASS,gBAAgBC,MAAMC,UAAY,SACpC,WACL/E,OAAOgF,oBAAoB,UAAWT,GACtCH,SAASS,gBAAgBC,MAAMC,UAAY,SAC5C,CACF,GAAE,CAACR,KAEGU,EAAAA,GAAAA,eACL,SAAClB,GAAD,CAAUlC,QAAS0C,EAAnB,UACE,UAACP,GAAD,WACGhC,EADH,KACa,SAACiC,GAAD,CAAapC,QAAS0C,SAGrCJ,GAEH,E,WCuED,OA/FA,WACE,IAyCkBe,EAzClB,EAAkCC,EAAgB,QAASC,IAA3D,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkDzF,EAAAA,EAAAA,UAAS,IAA3D,eAAO0F,EAAP,KAA0BC,EAA1B,KACA,GAAsC3F,EAAAA,EAAAA,WAAS,GAA/C,eAAO4F,EAAP,KAAqBC,EAArB,KACA,GAAoC7F,EAAAA,EAAAA,WAAS,GAA7C,eAAO8F,EAAP,KAAmBC,EAAnB,KAkDMC,EAAiB,WACrBH,GAAc,GACdE,GAAc,EACf,EAEKE,EAAmB,WACvBF,GAAc,EACf,EAMD,OACE,iCACE,SAAC,EAAD,CACE7D,OA5BYmD,EA4BKG,EA3BdH,EAAKa,MAAK,SAACC,EAAGC,GACnB,OAAID,EAAErF,OAASsF,EAAEtF,KACR,EAELqF,EAAErF,KACG,GAED,CACT,KAoBGS,iBAjEuB,SAAAG,GAC3B+D,EACED,EAAUnD,KAAI,SAAAC,GAAI,OAChBA,EAAKZ,KAAOA,GAAZ,kBAAsBY,GAAtB,IAA4BxB,MAAOwB,EAAKxB,OAASwB,CADjC,IAIrB,EA4DKb,kBAtDiB,SAAAC,GACrBiE,EAAqBjE,GACrBuE,GAAiB,EAClB,EAoDKzE,oBA3DmB,SAAAE,GACvB+D,EAAaD,EAAUa,QAAO,SAAA/D,GAAI,OAAIA,EAAKZ,KAAOA,CAAhB,IACnC,EAqDG,UAME,SAAC,GAAD,CAAWuC,YAZS,WACxB4B,GAAc,EACf,MAaID,GACC,SAAC,GAAD,CAAOnB,UAAWuB,EAAlB,UACE,SAAC,GAAD,CAAY5C,SAzDO,SAAAkD,GACzB,IAAMC,GAAO,gBAAK7E,IAAI8E,EAAAA,GAAAA,OAAaF,GAAtB,IAAyBxF,MAAM,IAC5C2E,GAAa,SAAAgB,GAAa,wBAAQA,GAAR,CAAuBF,GAAvB,GAC3B,MAwDO,KACHT,GACC,SAAC,GAAD,CAAOrB,UAAWuB,EAAlB,UACE,SAAC,GAAD,CACE5C,SA1DgB,SAAAkD,GACxBb,GAAa,SAAAgB,GAAa,OACxBA,EAAcpE,KAAI,SAAAC,GAChB,OAAIA,EAAKZ,KAAOgE,GACP,kBACFpD,GADL,IAEEX,KAAM2E,EAAE3E,KACRC,YAAa0E,EAAE1E,cAEZU,CACR,GATuB,GAW3B,EA+CSwB,KAAM0B,EAAUkB,MAAK,SAAApE,GAAI,OAAIA,EAAKZ,KAAOgE,CAAhB,QAG3B,OAGT,C","sources":["hooks/useLocalStorage.jsx","components/TodoList/ListItem/ListItem.styled.jsx","components/TodoList/ListItem/ListItem.jsx","components/TodoList/TodoList.styled.jsx","components/TodoList/TodoList.jsx","components/CreateTodo/CreateTodo.styled.jsx","components/CreateTodo/CreateTodo.jsx","components/EditTodo/EditTodo.styled.jsx","components/EditTodo/EditTodo.jsx","data/defaultList.js","components/AddButton/AddButton.styled.jsx","components/AddButton/AddButton.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","pages/Tasks/Tasks.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(\n    JSON.parse(window.localStorage.getItem(key)) ?? defaultValue\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n\nexport default useLocalStorage;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.div`\n  padding: 5px 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: solid black 2px;\n  border-radius: 4px;\n  background-color: ${props => (props.done ? 'grey' : 'azure')};\n`;\n\nexport const Checkbox = styled.input`\n  margin: 0 20px;\n  transform: scale(1.5);\n  cursor: pointer;\n`;\n\nexport const Task = styled.div`\n  width: 100%;\n  padding: 5px;\n  text-decoration: ${props => (props.done ? 'line-through' : 'none')};\n`;\n\nexport const Name = styled.p`\n  text-align: center;\n  font-weight: 500;\n`;\n\nexport const Description = styled.p``;\n\nexport const Controls = styled.div``;\n\nexport const DeleteButton = styled.button`\n  height: 30px;\n  width: 100px;\n  border-radius: 4px;\n  border-color: transparent;\n  &:hover {\n    background-color: red;\n    color: white;\n  }\n`;\n\nexport const EditButton = styled.button`\n  height: 30px;\n  width: 100px;\n  margin-bottom: 10px;\n  border-radius: 4px;\n  border-color: transparent;\n  &:hover {\n    background-color: orange;\n    color: white;\n  }\n`;\n","import React from 'react';\nimport {\n  Item,\n  Checkbox,\n  Task,\n  Name,\n  Description,\n  Controls,\n  DeleteButton,\n  EditButton,\n} from './ListItem.styled';\n\nfunction ListItem({\n  item,\n  onCheckboxChange,\n  onDeleteButtonClick,\n  onEditButtonClick,\n}) {\n  const { id, done, name, description } = item;\n  return (\n    <Item done={done}>\n      <Checkbox\n        type=\"checkbox\"\n        name=\"done\"\n        checked={done}\n        onChange={() => onCheckboxChange(id)}\n      />\n      <Task done={done}>\n        <Name>{name}</Name> <Description>{description}</Description>\n      </Task>\n      <Controls>\n        <EditButton\n          type=\"button\"\n          onClick={() => {\n            onEditButtonClick(id);\n          }}\n        >\n          Редагувати\n        </EditButton>\n        <DeleteButton type=\"button\" onClick={() => onDeleteButtonClick(id)}>\n          Видалити\n        </DeleteButton>\n      </Controls>\n    </Item>\n  );\n}\n\nexport default ListItem;\n","import styled from '@emotion/styled';\n\nexport const List = styled.li`\n  margin: 0;\n  padding: 5px;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n  grid-column-gap: 10px;\n  grid-row-gap: 1em;\n  list-style: none;\n  border: solid 2px black;\n`;\n","import React from 'react';\nimport ListItem from './ListItem';\nimport { List } from './TodoList.styled';\n\nfunction TodoList({ todos, children, ...otherProps }) {\n  if (!todos) return;\n  return (\n    <List>\n      {children}\n      {todos.map(todo => (\n        <ListItem key={todo.id} item={todo} {...otherProps} />\n      ))}\n    </List>\n  );\n}\n\nexport default TodoList;\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const EditorForm = styled(Form)`\n  padding: 10px 16px;\n  display: flex;\n  width: 500px;\n  flex-direction: column;\n  align-items: center;\n  border: solid black 2px;\n  border-radius: 4px;\n  background-color: lightgreen;\n`;\n\nexport const Title = styled.h2`\n  margin: 0;\n  margin-bottom: 20px;\n  padding: 0;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 24px;\n`;\n\nexport const Input = styled(Field)`\n  margin-left: 5px;\n  width: 350px;\n  height: 35px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 36px;\n  left: calc(100% / 2 - 100px);\n  font-size: 14px;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  height: 30px;\n  width: 100px;\n  border-radius: 4px;\n  border-color: transparent;\n  &:hover {\n    background-color: lightblue;\n    color: white;\n  }\n`;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  EditorForm,\n  Title,\n  Label,\n  Input,\n  Error,\n  Button,\n} from './CreateTodo.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  description: yup.string().required(),\n});\n\nfunction CreateTodo({ onSubmit }) {\n  const handleSubmit = async (values, { resetForm, setSubmitting }) => {\n    await onSubmit(values);\n    setSubmitting(false);\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={{ name: '', description: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <EditorForm>\n          <Title>Створити задачу</Title>\n          <Label>\n            {'Назва:'}\n            <Input type=\"text\" name=\"name\" />\n            <Error name=\"name\" component=\"div\" />\n          </Label>\n          <Label>\n            {'Опис:'} <Input type=\"text\" name=\"description\" />\n            <Error name=\"description\" component=\"div\" />\n          </Label>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            Створити\n          </Button>\n        </EditorForm>\n      )}\n    </Formik>\n  );\n}\n\nexport default CreateTodo;\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const EditorForm = styled(Form)`\n  padding: 10px 16px;\n  display: flex;\n  width: 500px;\n  flex-direction: column;\n  align-items: center;\n  border: solid black 2px;\n  border-radius: 4px;\n  background-color: lightblue;\n`;\n\nexport const Title = styled.h2`\n  margin: 0;\n  margin-bottom: 20px;\n  padding: 0;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 24px;\n`;\n\nexport const Input = styled(Field)`\n  margin-left: 5px;\n  width: 350px;\n  height: 35px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 36px;\n  left: calc(100% / 2 - 100px);\n  font-size: 14px;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  height: 30px;\n  width: 100px;\n  border-radius: 4px;\n  border-color: transparent;\n  &:hover {\n    background-color: lightgreen;\n    color: white;\n  }\n`;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  EditorForm,\n  Title,\n  Label,\n  Input,\n  Error,\n  Button,\n} from './EditTodo.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  description: yup.string().required(),\n});\n\nfunction EditTodo({ onSubmit, task }) {\n  const { name, description } = task;\n  const handleSubmit = async (values, { setSubmitting }) => {\n    await onSubmit(values);\n    setSubmitting(false);\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: name, description: description }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <EditorForm>\n          <Title>Редагувати задачу</Title>\n          <Label>\n            {'Назва:'}\n            <Input type=\"text\" name=\"name\" />\n            <Error name=\"name\" component=\"div\" />\n          </Label>\n          <Label>\n            {'Опис:'} <Input type=\"text\" name=\"description\" />\n            <Error name=\"description\" component=\"div\" />\n          </Label>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            Редагувати\n          </Button>\n        </EditorForm>\n      )}\n    </Formik>\n  );\n}\n\nexport default EditTodo;\n","const defaultTodos = [\n  {\n    id: 'id-1',\n    name: 'Щось зробити',\n    description: 'Такий текст завдання',\n    done: false,\n  },\n  {\n    id: 'id-2',\n    name: 'Ще щось зробити',\n    description: 'Ну ось такий текст завдання',\n    done: false,\n  },\n  {\n    id: 'id-3',\n    name: 'Ще ось таке',\n    description: 'І ось такий текст завдання',\n    done: false,\n  },\n  {\n    id: 'id-4',\n    name: 'І таке було',\n    description: 'Вже виконане завдання',\n    done: true,\n  },\n  {\n    id: 'id-5',\n    name: 'А ще ось',\n    description: 'На останок на тобі ще',\n    done: false,\n  },\n];\n\nexport default defaultTodos;\n","import styled from '@emotion/styled';\nimport { MdAdd } from 'react-icons/md';\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  min-height: 100px;\n  height: 100%;\n  border: 2px black solid;\n  border-radius: 5px;\n  transition: 250ms cubic-bezier(0.19, 1, 0.22, 1);\n  :hover {\n    background-color: lightcyan;\n    transform: scale(1.01);\n  }\n`;\n\nexport const ButtonIcon = styled(MdAdd)`\n  width: 50px;\n  height: 50px;\n`;\n","import React from 'react';\nimport { Button, ButtonIcon } from './AddButton.styled';\n\nfunction AddButton({ handleClick }) {\n  return (\n    <Button onClick={handleClick}>\n      <ButtonIcon />\n    </Button>\n  );\n}\n\nexport default AddButton;\n","import styled from '@emotion/styled';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalContent = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport const CloseButton = styled(AiOutlineCloseCircle)`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  width: 25px;\n  height: 25px;\n  transition: transform 500ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  :hover {\n    color: orange;\n    transform: rotate(360deg);\n  }\n  :active {\n    color: red;\n  }\n`;\n","import React from 'react';\nimport { useCallback, useEffect } from 'react';\nimport { Backdrop, ModalContent, CloseButton } from './Modal.styled';\nimport { createPortal } from 'react-dom';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nfunction Modal({ children, hideModal }) {\n  const handleCloseModal = useCallback(\n    ({ code, target, currentTarget }) => {\n      if (code === 'Escape' || target === currentTarget) {\n        hideModal();\n      }\n    },\n    [hideModal]\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleCloseModal);\n    document.documentElement.style.overflowY = 'hidden';\n    return () => {\n      window.removeEventListener('keydown', handleCloseModal);\n      document.documentElement.style.overflowY = 'visible';\n    };\n  }, [handleCloseModal]);\n\n  return createPortal(\n    <Backdrop onClick={handleCloseModal}>\n      <ModalContent>\n        {children} <CloseButton onClick={handleCloseModal} />\n      </ModalContent>\n    </Backdrop>,\n    modalRoot\n  );\n}\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport useLocalStorage from 'hooks/useLocalStorage';\nimport TodoList from 'components/TodoList';\nimport CreateTodo from 'components/CreateTodo';\nimport EditTodo from 'components/EditTodo/EditTodo';\nimport defaultTodos from 'data/defaultList';\nimport AddButton from 'components/AddButton';\nimport Modal from 'components/Modal';\nimport { nanoid } from 'nanoid';\n\nfunction Tasks() {\n  const [todosList, setTodosList] = useLocalStorage('todos', defaultTodos);\n  const [currentEditionsId, setCurrentEditionsId] = useState('');\n  const [isCreateShow, setCreateShow] = useState(false);\n  const [isEditShow, setIsEditShow] = useState(false);\n\n  const handleCheckboxChange = id => {\n    setTodosList(\n      todosList.map(todo =>\n        todo.id === id ? { ...todo, done: !todo.done } : todo\n      )\n    );\n  };\n\n  const handleDeleteItem = id => {\n    setTodosList(todosList.filter(todo => todo.id !== id));\n  };\n\n  const handleEditItem = id => {\n    setCurrentEditionsId(id);\n    handleShowEditor(true);\n  };\n\n  const handleSubmitCreate = e => {\n    const newTask = { id: nanoid(), ...e, done: false };\n    setTodosList(prevTodosList => [...prevTodosList, newTask]);\n  };\n\n  const handleSubmitEdite = e => {\n    setTodosList(prevTodosList =>\n      prevTodosList.map(todo => {\n        if (todo.id === currentEditionsId)\n          return {\n            ...todo,\n            name: e.name,\n            description: e.description,\n          };\n        return todo;\n      })\n    );\n  };\n\n  const sortTodos = list => {\n    return list.sort((a, b) => {\n      if (a.done === b.done) {\n        return 0;\n      }\n      if (a.done) {\n        return 1;\n      }\n      return -1;\n    });\n  };\n\n  const handleCloseAll = () => {\n    setCreateShow(false);\n    setIsEditShow(false);\n  };\n\n  const handleShowEditor = () => {\n    setIsEditShow(true);\n  };\n\n  const handleShowCreacte = () => {\n    setCreateShow(true);\n  };\n\n  return (\n    <>\n      <TodoList\n        todos={sortTodos(todosList)}\n        onCheckboxChange={handleCheckboxChange}\n        onEditButtonClick={handleEditItem}\n        onDeleteButtonClick={handleDeleteItem}\n      >\n        <AddButton handleClick={handleShowCreacte} />\n      </TodoList>\n\n      {isCreateShow ? (\n        <Modal hideModal={handleCloseAll}>\n          <CreateTodo onSubmit={handleSubmitCreate} />\n        </Modal>\n      ) : null}\n      {isEditShow ? (\n        <Modal hideModal={handleCloseAll}>\n          <EditTodo\n            onSubmit={handleSubmitEdite}\n            task={todosList.find(todo => todo.id === currentEditionsId)}\n          />\n        </Modal>\n      ) : null}\n    </>\n  );\n}\n\nexport default Tasks;\n"],"names":["key","defaultValue","useState","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","Item","styled","props","done","Checkbox","Task","Name","Description","Controls","DeleteButton","EditButton","item","onCheckboxChange","onDeleteButtonClick","onEditButtonClick","id","name","description","type","checked","onChange","onClick","List","todos","children","otherProps","map","todo","EditorForm","Form","Title","Label","Input","Field","Error","ErrorMessage","Button","schema","yup","shape","required","onSubmit","handleSubmit","values","resetForm","setSubmitting","initialValues","validationSchema","isSubmitting","component","disabled","task","ButtonIcon","MdAdd","handleClick","Backdrop","ModalContent","CloseButton","AiOutlineCloseCircle","modalRoot","document","querySelector","hideModal","handleCloseModal","useCallback","code","target","currentTarget","addEventListener","documentElement","style","overflowY","removeEventListener","createPortal","list","useLocalStorage","defaultTodos","todosList","setTodosList","currentEditionsId","setCurrentEditionsId","isCreateShow","setCreateShow","isEditShow","setIsEditShow","handleCloseAll","handleShowEditor","sort","a","b","filter","e","newTask","nanoid","prevTodosList","find"],"sourceRoot":""}